        -:    0:Source:C:/Users/ALL/PLs/C++/proC++/bellman_ford.h
        -:    0:Graph:C:\Users\ALL\PLs\C++\proC++\cmake-build-debug-coverage\CMakeFiles\proC++.dir\main.cpp.gcno
        -:    0:Data:C:\Users\ALL\PLs\C++\proC++\cmake-build-debug-coverage\CMakeFiles\proC++.dir\main.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <climits>
        -:    2:#include <iostream>
        -:    3:using std::cout, std::endl, std::cin;
        -:    4:// Wrapper class for storing an edge
        -:    5:class Edge
        -:    6:{
        -:    7:public:
        -:    8:    int src, dst, weight;
        -:    9:};
        -:   10:
        -:   11:// Wrapper class for storing a graph
        -:   12:class Graph
        -:   13:{
        -:   14:public:
        -:   15:    int vertexNum, edgeNum;
        -:   16:    Edge *edges;
        -:   17:
        -:   18:    // Constructs a graph with V vertices and E edges
        -:   19:    [[maybe_unused]] Graph(int V, int E)
        -:   20:    {
        -:   21:        this->vertexNum = V;
        -:   22:        this->edgeNum = E;
        -:   23:        this->edges = (Edge *)malloc(E * sizeof(Edge));
        -:   24:    }
        -:   25:
        -:   26:    // Adds the given edge to the graph
        -:   27:    [[maybe_unused]] void addEdge(int src, int dst, int weight) const
        -:   28:    {
        -:   29:        static int edgeInd = 0;
        -:   30:        if (edgeInd < this->edgeNum)
        -:   31:        {
        -:   32:            Edge newEdge{};
        -:   33:            newEdge.src = src;
        -:   34:            newEdge.dst = dst;
        -:   35:            newEdge.weight = weight;
        -:   36:            this->edges[edgeInd++] = newEdge;
        -:   37:        }
        -:   38:    }
        -:   39:};
        -:   40:
        -:   41:// Utility function to print distances
function _Z5printPii called 0 returned 0% blocks executed 0%
    #####:   42:void print(int dist[], int V)
        -:   43:{
    #####:   44:    cout << "\nVertex  Distance" << endl;
    %%%%%:   44-block  0
call    0 never executed
call    1 never executed
    #####:   45:    for (int i = 0; i < V; i++)
    %%%%%:   45-block  0
    %%%%%:   45-block  1
branch  0 never executed
branch  1 never executed
        -:   46:    {
    #####:   47:        if (dist[i] != INT_MAX)
    %%%%%:   47-block  0
branch  0 never executed
branch  1 never executed
    #####:   48:            cout << i << "\t" << dist[i] << endl;
    %%%%%:   48-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   49:        else
    #####:   50:            cout << i << "\tINF" << endl;
    %%%%%:   50-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:   51:    }
    #####:   52:}
        -:   53:
        -:   54:// The main function that finds the shortest path from given source
        -:   55:// to all other vertices using Bellman-Ford.It also detects negative
        -:   56:// weight cycle
function _Z11BellmanFord5Graphi called 0 returned 0% blocks executed 0%
    #####:   57:[[maybe_unused]] void BellmanFord(Graph graph, int src)
        -:   58:{
    #####:   59:    int V = graph.vertexNum;
    #####:   60:    int E = graph.edgeNum;
    #####:   61:    int dist[V];
        -:   62:
        -:   63:    // Initialize distances array as INF for all except source
        -:   64:    // Initialize source as zero
    #####:   65:    for (int i = 0; i < V; i++)
    %%%%%:   65-block  0
branch  0 never executed
branch  1 never executed
    #####:   66:        dist[i] = INT_MAX;
    %%%%%:   66-block  0
    #####:   67:    dist[src] = 0;
        -:   68:
        -:   69:    // Calculate the shortest path distance from source to all edges
        -:   70:    // A path can contain maximum (|V|-1) edges
    #####:   71:    for (int i = 0; i <= V - 1; i++)
    %%%%%:   71-block  0
    %%%%%:   71-block  1
    %%%%%:   71-block  2
branch  0 never executed
branch  1 never executed
    #####:   72:        for (int j = 0; j < E; j++)
    %%%%%:   72-block  0
    %%%%%:   72-block  1
    %%%%%:   72-block  2
branch  0 never executed
branch  1 never executed
        -:   73:        {
    #####:   74:            int u = graph.edges[j].src;
    #####:   75:            int v = graph.edges[j].dst;
    #####:   76:            int w = graph.edges[j].weight;
        -:   77:
    #####:   78:            if (dist[u] != INT_MAX && dist[u] + w < dist[v])
    %%%%%:   78-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   78-block  1
branch  2 never executed
branch  3 never executed
    #####:   79:                dist[v] = dist[u] + w;
    %%%%%:   79-block  0
        -:   80:        }
        -:   81:
        -:   82:    // Iterate inner loop once more to check for negative cycle
    #####:   83:    for (int j = 0; j < E; j++)
    %%%%%:   83-block  0
    %%%%%:   83-block  1
    %%%%%:   83-block  2
branch  0 never executed
branch  1 never executed
        -:   84:    {
    #####:   85:        int u = graph.edges[j].src;
    #####:   86:        int v = graph.edges[j].dst;
    #####:   87:        int w = graph.edges[j].weight;
        -:   88:
    #####:   89:        if (dist[u] != INT_MAX && dist[u] + w < dist[v])
    %%%%%:   89-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   89-block  1
branch  2 never executed
branch  3 never executed
        -:   90:        {
        -:   91:            cout << "Graph contains negative weight cycle. Hence, shortest "
    #####:   92:                    "distance not guaranteed."
    %%%%%:   92-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   93:                 << endl;
    %%%%%:   93-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   94:            return;
    %%%%%:   94-block  0
        -:   95:        }
        -:   96:    }
        -:   97:
    #####:   98:    print(dist, V);
    %%%%%:   98-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   99:}
    %%%%%:   99-block  0
        -:  100:
        -:  101:/*
        -:  102:    int V, E, gSrc;
        -:  103:    int src, dst, weight;
        -:  104:    cout << "Enter number of vertices: ";
        -:  105:    cin >> V;
        -:  106:    cout << "Enter number of edges: ";
        -:  107:    cin >> E;
        -:  108:    Graph G(V, E);
        -:  109:    for (int i = 0; i < E; i++)
        -:  110:    {
        -:  111:        cout << "\nEdge " << i + 1 << "\nEnter source: ";
        -:  112:        cin >> src;
        -:  113:        cout << "Enter destination: ";
        -:  114:        cin >> dst;
        -:  115:        cout << "Enter weight: ";
        -:  116:        cin >> weight;
        -:  117:        G.addEdge(src, dst, weight);
        -:  118:    }
        -:  119:    cout << "\nEnter source: ";
        -:  120:    cin >> gSrc;
        -:  121:    BellmanFord(G, gSrc);
        -:  122:*/
