        -:    0:Source:C:/Users/ALL/PLs/C++/proC++/dijkstra.h
        -:    0:Graph:C:\Users\ALL\PLs\C++\proC++\cmake-build-debug-coverage\CMakeFiles\proC++.dir\main.cpp.gcno
        -:    0:Data:C:\Users\ALL\PLs\C++\proC++\cmake-build-debug-coverage\CMakeFiles\proC++.dir\main.cpp.gcda
        -:    0:Runs:1
        -:    1:#pragma once
        -:    2:#include <iostream>
        -:    3:#include <climits>
        -:    4:using std::cout, std::endl;
        -:    5:
function _Z8miniDistPKiPKb called 6 returned 100% blocks executed 100%
        6:    6:int miniDist(const int distance[], const bool Tset[])
        -:    7:{
        6:    8:    int minimum = INT_MAX, ind;
       42:    9:    for (int k = 0; k < 6; k++)
        6:    9-block  0
       36:    9-block  1
       42:    9-block  2
branch  0 taken 36
branch  1 taken 6 (fallthrough)
        -:   10:    {
       36:   11:        if (!Tset[k] && distance[k] <= minimum)
       36:   11-block  0
branch  0 taken 21 (fallthrough)
branch  1 taken 15
       21:   11-block  1
branch  2 taken 8 (fallthrough)
branch  3 taken 13
        -:   12:        {
        8:   13:            minimum = distance[k];
        8:   14:            ind = k;
        8:   14-block  0
        -:   15:        }
        -:   16:    }
        6:   17:    return ind;
        6:   17-block  0
        -:   18:}
        -:   19:
function _Z8dijkstraPA6_ii called 1 returned 100% blocks executed 100%
        1:   20:void dijkstra(int graph[6][6], int src)
        -:   21:{
        -:   22:    int distance[6];
        -:   23:    bool Tset[6];
        -:   24:
        7:   25:    for (int k = 0; k < 6; k++)
        1:   25-block  0
        7:   25-block  1
branch  0 taken 6
branch  1 taken 1 (fallthrough)
        -:   26:    {
        6:   27:        distance[k] = INT_MAX;
        6:   28:        Tset[k] = false;
        6:   28-block  0
        -:   29:    }
        -:   30:
        1:   31:    distance[src] = 0;
        -:   32:
        7:   33:    for (int i = 0; i < 6; i++)
        1:   33-block  0
        6:   33-block  1
        7:   33-block  2
branch  0 taken 6
branch  1 taken 1 (fallthrough)
        -:   34:    {
        6:   35:        int m = miniDist(distance, Tset);
        6:   35-block  0
call    0 returned 6
        6:   36:        Tset[m] = true;
       42:   37:        for (int j = 0; j < 6; j++)
       36:   37-block  0
       42:   37-block  1
branch  0 taken 36
branch  1 taken 6 (fallthrough)
        -:   38:        {
       36:   39:            if (!Tset[j] && graph[m][j] && distance[m] != INT_MAX && distance[m] + graph[m][j] < distance[j])
       36:   39-block  0
branch  0 taken 15 (fallthrough)
branch  1 taken 21
       15:   39-block  1
branch  2 taken 9 (fallthrough)
branch  3 taken 6
        9:   39-block  2
branch  4 taken 9 (fallthrough)
branch  5 taken 0
        9:   39-block  3
branch  6 taken 6 (fallthrough)
branch  7 taken 3
        6:   40:                distance[j] = distance[m] + graph[m][j];
        6:   40-block  0
        -:   41:        }
        -:   42:    }
        1:   43:    cout << "Vertex\t\tDistance from source vertex" << endl;
        1:   43-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   43-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        7:   44:    for (int k = 0; k < 6; k++)
        1:   44-block  0
        6:   44-block  1
        7:   44-block  2
branch  0 taken 6
branch  1 taken 1 (fallthrough)
        -:   45:    {
        6:   46:        char str = 65 + k;
        6:   47:        cout << str << "\t\t\t" << distance[k] << endl;
        6:   47-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:   47-block  1
call    3 returned 6
branch  4 taken 6 (fallthrough)
branch  5 taken 0 (throw)
        6:   47-block  2
call    6 returned 6
branch  7 taken 6 (fallthrough)
branch  8 taken 0 (throw)
        6:   47-block  3
call    9 returned 6
branch 10 taken 6 (fallthrough)
branch 11 taken 0 (throw)
        -:   48:    }
        1:   49:}
        1:   49-block  0
        -:   50:
        -:   51:/*
        -:   52:
        -:   53:*/
